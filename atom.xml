<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗夏Blog</title>
  <subtitle>可能是一个假的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://libaicode.com/"/>
  <updated>2017-03-22T06:57:39.413Z</updated>
  <id>http://libaicode.com/</id>
  
  <author>
    <name>Xiang Chen</name>
    <email>Prettydied@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unreal Message Bus</title>
    <link href="http://libaicode.com/2017/03/22/UnrealMessageBus/"/>
    <id>http://libaicode.com/2017/03/22/UnrealMessageBus/</id>
    <published>2017-03-22T06:18:12.000Z</published>
    <updated>2017-03-22T06:57:39.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unreal-Message-Bus-消息与消息处理"><a href="#Unreal-Message-Bus-消息与消息处理" class="headerlink" title="Unreal Message Bus,消息与消息处理"></a>Unreal Message Bus,消息与消息处理</h1><hr>
<p>在UE4C++开发过程中，我们可以方便的使用unreal自带的消息处理机制，来达到各个模块之间解耦的通信模式。下面我们来看一个通过UMB改变一个游戏各状态的例子。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>各个模块之间的通信队列<br><img src="https://cl.ly/0B0t3N3t1J2K/MessageQueue.png" alt="消息队列"></p>
<h3 id="1-添加消息头文件"><a href="#1-添加消息头文件" class="headerlink" title="1. 添加消息头文件"></a>1. 添加消息头文件</h3><p>添加一个单独的SGameMessage头文件，方便我们管理。在头文件中我们定义一个用来传送消息的结构体和一个代表游戏状态的枚举类。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SGameMessages.generated.h"</span>   <span class="comment">//添加Unreal代码的元数据信息，必须放在所有include的底部</span></span></div><div class="line"></div><div class="line"><span class="comment">/** Defines the game state */</span></div><div class="line">UENUM()</div><div class="line"><span class="keyword">enum</span> <span class="keyword">class</span> ESGGameStatus : uint8</div><div class="line">&#123;</div><div class="line">	EGS_Init,					<span class="comment">// Initial value</span></div><div class="line">	EGS_GameStart,				<span class="comment">// Game start</span></div><div class="line">	EGS_RondBegin,				<span class="comment">// New round begin</span></div><div class="line">	EGS_PlayerTurnBegin,		<span class="comment">// Player turn begin</span></div><div class="line">	EGS_PlayerRegengerate,		<span class="comment">// Player regenerate</span></div><div class="line">	EGS_PlayerSkillCD,			<span class="comment">// Player skill CD</span></div><div class="line">	EGS_PlayerBeginInput,		<span class="comment">// Player begin input, can link line or use the skill</span></div><div class="line">	EGS_PlayerEndBuildPath,		<span class="comment">// Player end build the path, but he can still use skill or buy some thing</span></div><div class="line">	EGS_PlayerEndInput,			<span class="comment">// Player end input, his turn end</span></div><div class="line">	EGS_EnemyAttack,			<span class="comment">// Enemy attack player</span></div><div class="line">	EGS_RoundEnd,				<span class="comment">// End of the round</span></div><div class="line">	EGS_GameOver,				<span class="comment">// Game over</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Game status update messages</div><div class="line">*/</div><div class="line">USTRUCT()</div><div class="line"><span class="keyword">struct</span> FMessage_Gameplay_GameStatusUpdate</div><div class="line">&#123;</div><div class="line">	GENERATED_USTRUCT_BODY()</div><div class="line"></div><div class="line">	<span class="comment">/** The new game status */</span></div><div class="line">	UPROPERTY()</div><div class="line">	ESGGameStatus NewGameStatus;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="2-为需要通信的模块添加私有的MessageEndPoint"><a href="#2-为需要通信的模块添加私有的MessageEndPoint" class="headerlink" title="2. 为需要通信的模块添加私有的MessageEndPoint"></a>2. 为需要通信的模块添加私有的MessageEndPoint</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>:</div><div class="line">	FMessageEndpointPtr MessageEndpoint;</div></pre></td></tr></table></figure>
<h3 id="3-初始化MessageEndPoint"><a href="#3-初始化MessageEndPoint" class="headerlink" title="3. 初始化MessageEndPoint"></a>3. 初始化MessageEndPoint</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MessageEndpoint = FMessageEndpoint::Builder(<span class="string">"CheatManagerMessageEP"</span>);</div></pre></td></tr></table></figure>
<h3 id="4-发送一个消息至消息队列中"><a href="#4-发送一个消息至消息队列中" class="headerlink" title="4. 发送一个消息至消息队列中"></a>4. 发送一个消息至消息队列中</h3><p>在使用MessageEndPoint前需要用check对象的合法性,这是一个好习惯<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发送一个消息到消息总线上</span></div><div class="line">	check(MessageEndpoint.IsValid());</div><div class="line">	FMessage_Gameplay_GameStatusUpdate* Message = <span class="keyword">new</span> FMessage_Gameplay_GameStatusUpdate();  <span class="comment">//new一个对象在堆中，不在栈上，在离开函数之后生命周期不会消失。 你负责创建，Unreal Message Bus 负责回收内存</span></div><div class="line">	Message-&gt;NewGameStatus = ESGGameStatus::EGS_RondBegin;</div><div class="line">	MessageEndpoint-&gt;Publish(Message, EMessageScope::Process);</div></pre></td></tr></table></figure></p>
<h3 id="5-监听消息队列上需要接受的信息"><a href="#5-监听消息队列上需要接受的信息" class="headerlink" title="5. 监听消息队列上需要接受的信息"></a>5. 监听消息队列上需要接受的信息</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//初始化并订阅消息 </span></div><div class="line">MessageEndpoint = FMessageEndpoint::Builder(<span class="string">"Gameplay_GameMode"</span>) </div><div class="line">	.Handling&lt;FMessage_Gameplay_GameStatusUpdate&gt;(<span class="keyword">this</span>, &amp;ASGameGameMode::HandleGameStatusUpdate);  <span class="comment">//模板函数</span></div><div class="line">check(MessageEndpoint.IsValid());</div><div class="line">MessageEndpoint-&gt;Subscribe&lt;FMessage_Gameplay_GameStatusUpdate&gt;();</div></pre></td></tr></table></figure>
<h3 id="6-监听类中添加实现"><a href="#6-监听类中添加实现" class="headerlink" title="6. 监听类中添加实现"></a>6. 监听类中添加实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ASGameGameMode::HandleGameStatusUpdate(<span class="keyword">const</span> FMessage_Gameplay_GameStatusUpdate&amp; Message, <span class="keyword">const</span> IMessageContextRef&amp; Context)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//添加需要处理的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unreal-Message-Bus-消息与消息处理&quot;&gt;&lt;a href=&quot;#Unreal-Message-Bus-消息与消息处理&quot; class=&quot;headerlink&quot; title=&quot;Unreal Message Bus,消息与消息处理&quot;&gt;&lt;/a&gt;Unreal M
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于设计模式</title>
    <link href="http://libaicode.com/2017/03/14/DPNoteChapter01/"/>
    <id>http://libaicode.com/2017/03/14/DPNoteChapter01/</id>
    <published>2017-03-14T10:18:42.000Z</published>
    <updated>2017-05-09T10:01:59.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式笔记"><a href="#设计模式笔记" class="headerlink" title="设计模式笔记"></a>设计模式笔记</h1><hr>
<p>下面列子出于 HeadFrist 设计模式一书，算是一点总结。</p>
<h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1. 策略模式"></a>1. 策略模式</h2><p>策略模式定义了算法族,分别封装起来,让他们之间可以互相替换,此模式让算法的变化独立于使用算法的客户</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol>
<li>找出应用中可能需要变化之处,把它们独立出来,不要和那些不需要的变化的代码混在一起</li>
<li>针对接口编程,而不是针对实现编程</li>
<li>多用组合,少用继承</li>
</ol>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>  </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> java.lang.Exception</span></div><div class="line">	&#123;</div><div class="line">		MallarDuck md = <span class="keyword">new</span>  MallarDuck();</div><div class="line">		md.PerformFly();</div><div class="line">		md.SettingFly(<span class="keyword">new</span> FlyNoWay());</div><div class="line">		md.PerformFly();</div><div class="line">		md.Display();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"FlyWithWings"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"FlyNoWay"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></div><div class="line">&#123;</div><div class="line">    FlyBehavior myFlyBehavior;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PerformFly</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        myFlyBehavior.Fly();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SettingFly</span><span class="params">(FlyBehavior fb)</span></span></div><div class="line">    &#123;</div><div class="line">        myFlyBehavior = fb;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MallarDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallarDuck</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        myFlyBehavior = <span class="keyword">new</span> FlyWithWings();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"I'm real mallarDuck!"</span>);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="2-观察者模式"><a href="#2-观察者模式" class="headerlink" title="2. 观察者模式"></a>2. 观察者模式</h2><p>定义了对象之间的一对多依赖,这样一来,当一个对象改变状态时,他的所有依赖者都会收到通知并自动更新</p>
<h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><ol>
<li>为了交互对象之间的松耦合设计而努力</li>
</ol>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">		observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">		observers.add(o);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = observers.indexOf(o);</div><div class="line">		<span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">			observers.remove(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">			observer.update(temperature, humidity, pressure);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">		notifyObservers();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.temperature = temperature;</div><div class="line">		<span class="keyword">this</span>.humidity = humidity;</div><div class="line">		<span class="keyword">this</span>.pressure = pressure;</div><div class="line">		measurementsChanged();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">	<span class="keyword">private</span> Subject weatherData;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.weatherData = weatherData;</div><div class="line">		weatherData.registerObserver(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.temperature = temperature;</div><div class="line">		<span class="keyword">this</span>.humidity = humidity;</div><div class="line">		display();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Current conditions: "</span> + temperature </div><div class="line">			+ <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		WeatherData weatherData = <span class="keyword">new</span> WeatherData();</div><div class="line">	</div><div class="line">		CurrentConditionsDisplay currentDisplay = </div><div class="line">			<span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">		weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</div><div class="line">		weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</div><div class="line">		weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p>动态地将责任附加到对象上。若要扩展功能，装饰着提供了比继承更有弹性的替代方案。</p>
<h3 id="设计原则-2"><a href="#设计原则-2" class="headerlink" title="设计原则"></a>设计原则</h3><ol>
<li>类对扩张开放,对修改关闭</li>
</ol>
<p>####例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">//超类饮料</span></div><div class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span></span></div><div class="line">&#123;</div><div class="line">    String description = <span class="string">"UnKnow Beverage"</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetDescription</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//装饰着类 对饮料类进行装饰</span></div><div class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">GetDescription</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//具体为某一种饮料</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        description = <span class="string">"Espresso Coffee"</span>;    </div><div class="line">     </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        description = <span class="string">"HouseBlend Coffee"</span>;    </div><div class="line">     </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.99</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//添加摩卡装饰</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span></span></div><div class="line">&#123;</div><div class="line">    Beverage beverage;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.beverage = beverage;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetDescription</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> beverage.GetDescription() + <span class="string">", Mocha"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">20</span> + beverage.cost();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span></span></div><div class="line">&#123;</div><div class="line">    Beverage beverage;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.beverage = beverage;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetDescription</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> beverage.GetDescription() + <span class="string">", Mocha"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">15</span> + beverage.cost();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span></span></div><div class="line">&#123;</div><div class="line">    Beverage beverage;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.beverage = beverage;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetDescription</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> beverage.GetDescription() + <span class="string">", Mocha"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="number">10</span> + beverage.cost();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</div><div class="line">        System.out.println(beverage.GetDescription() + <span class="string">'$'</span>+beverage.cost());</div><div class="line">        </div><div class="line">        <span class="comment">//制造一个Espresso对象</span></div><div class="line">        Beverage beverage2 = <span class="keyword">new</span> Espresso();</div><div class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</div><div class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</div><div class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</div><div class="line">        System.out.println(beverage2.GetDescription()+<span class="string">'$'</span>+beverage2.cost());</div><div class="line">        </div><div class="line">        <span class="comment">//制造一个HouseBlend对象</span></div><div class="line">        Beverage beverage3 = <span class="keyword">new</span> HouseBlend();</div><div class="line">        beverage3 = <span class="keyword">new</span> Mocha(beverage3);</div><div class="line">        beverage3 = <span class="keyword">new</span> Mocha(beverage3);</div><div class="line">        beverage3 = <span class="keyword">new</span> Whip(beverage3);</div><div class="line">        System.out.println(beverage3.GetDescription()+<span class="string">'$'</span>+beverage3.cost());</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面为运行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Espresso Coffee$<span class="number">1.99</span></div><div class="line">Espresso Coffee, Mocha, Mocha, Mocha$<span class="number">2.49</span></div><div class="line">HouseBlend Coffee, Mocha, Mocha, Mocha$<span class="number">1.49</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式笔记&quot;&gt;&lt;a href=&quot;#设计模式笔记&quot; class=&quot;headerlink&quot; title=&quot;设计模式笔记&quot;&gt;&lt;/a&gt;设计模式笔记&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;下面列子出于 HeadFrist 设计模式一书，算是一点总结。&lt;/p&gt;
&lt;h2 id=&quot;1-策略模
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UE4的一些笔记</title>
    <link href="http://libaicode.com/2017/03/10/SGameNote/"/>
    <id>http://libaicode.com/2017/03/10/SGameNote/</id>
    <published>2017-03-10T09:45:42.000Z</published>
    <updated>2017-03-14T10:21:15.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UE4的一些笔记"><a href="#UE4的一些笔记" class="headerlink" title="UE4的一些笔记"></a>UE4的一些笔记</h1><hr>
<h2 id="Git-Repo"><a href="#Git-Repo" class="headerlink" title="Git Repo"></a>Git Repo</h2><ul>
<li>GitHub    私有库收费，速度可以</li>
<li>BitBucket 私有库免费，速度一般</li>
</ul>
<h2 id="Game-Framework"><a href="#Game-Framework" class="headerlink" title="Game Framework"></a>Game Framework</h2><p><img src="https://cl.ly/1a2T2O1A3w1U/1.png" alt="概图"></p>
<ol>
<li><p>Actor</p>
</li>
<li><p>Components<br> A.提供给Actor重复使用。<br> B.列如 Scene Component(变换矩阵等),粒子组件<br> C.以及一系列事件 exp:Hit/Begin Overlap etc..</p>
</li>
<li><p>Pawn  玩家<br> 没有movement和input code</p>
</li>
<li><p>Controller<br> Pawn的灵魂..负责控制Player或者AI等</p>
</li>
<li><p>Character<br> 特殊的Pawn,Pawn添加了一系列component 可以移动等            </p>
</li>
<li><p>HUD<br> 游戏内的UI</p>
</li>
<li><p>GameMode<br> A. 游戏的核心<br> B. 包含Pawn,Controller,HUD,etc..<br> c. 可以在任何地方访问通过GetGameMode           </p>
</li>
<li><p>Other Important Concepts<br> A. Input<br> B. Collision<br> C. Replication                                                </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UE4的一些笔记&quot;&gt;&lt;a href=&quot;#UE4的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;UE4的一些笔记&quot;&gt;&lt;/a&gt;UE4的一些笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Git-Repo&quot;&gt;&lt;a href=&quot;#Git-Repo&quot; class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>公开课</title>
    <link href="http://libaicode.com/2017/03/10/course_20170310/"/>
    <id>http://libaicode.com/2017/03/10/course_20170310/</id>
    <published>2017-03-10T04:01:42.000Z</published>
    <updated>2017-03-14T10:21:26.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公开课"><a href="#公开课" class="headerlink" title="公开课"></a>公开课</h1><h3 id="最近发现两个不错的公开课网站，如果你英语不错一起加入吧"><a href="#最近发现两个不错的公开课网站，如果你英语不错一起加入吧" class="headerlink" title="最近发现两个不错的公开课网站，如果你英语不错一起加入吧"></a>最近发现两个不错的公开课网站，如果你英语不错一起加入吧</h3><ol>
<li><em>cousera</em>      <a href="https://www.coursera.org" target="_blank" rel="external">https://www.coursera.org</a></li>
<li><em>codecademy</em>   <a href="https://www.codecademy.com" target="_blank" rel="external">https://www.codecademy.com</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;公开课&quot;&gt;&lt;a href=&quot;#公开课&quot; class=&quot;headerlink&quot; title=&quot;公开课&quot;&gt;&lt;/a&gt;公开课&lt;/h1&gt;&lt;h3 id=&quot;最近发现两个不错的公开课网站，如果你英语不错一起加入吧&quot;&gt;&lt;a href=&quot;#最近发现两个不错的公开课网站，如果你英语不错
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多git账户情况下Hexo博客部署</title>
    <link href="http://libaicode.com/2017/03/02/Hexo_blog_3/"/>
    <id>http://libaicode.com/2017/03/02/Hexo_blog_3/</id>
    <published>2017-03-02T08:21:42.000Z</published>
    <updated>2017-03-14T10:20:56.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近在使用Hexo搭建博客时碰到很多问题，其中之一便是如果之前PC终端已使用git搭建过博客，现在需要在同一台终端上使用不同的git账户再搭建博客，就会在部署时<br> <img src="https://cl.ly/382R3o3v0U3g/1.png" alt="hexod"><br>提示<br>ERROR: Permission to A/A.github.com.git denied to B.<br>导致失败。</p>
<hr>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul>
<li><h5 id="1-首先取消git全局设置，输入这两条命令"><a href="#1-首先取消git全局设置，输入这两条命令" class="headerlink" title="1 首先取消git全局设置，输入这两条命令"></a>1 首先取消git全局设置，输入这两条命令</h5><p><img src="https://cl.ly/16293L0h0Q3f/2.png" alt="unset"></p>
</li>
<li><h5 id="2-添加新的Shh配置"><a href="#2-添加新的Shh配置" class="headerlink" title="2 添加新的Shh配置"></a>2 添加新的Shh配置</h5><p><img src="https://cl.ly/1N330B1W1W0o/3.png" alt="pic4"><br>之后会提示你输入文件名，区别第一个默认名称“id_rsa”就可以,假设为“id_rsa_B”。把新生成的公钥加入到你第二个git账号。</p>
</li>
<li><h5 id="3-如果c-Users-yourname-ssh-目录下没有config文件，新建一个"><a href="#3-如果c-Users-yourname-ssh-目录下没有config文件，新建一个" class="headerlink" title="3 如果c:\Users\yourname.ssh 目录下没有config文件，新建一个"></a>3 如果c:\Users\yourname.ssh 目录下没有config文件，新建一个</h5><p><img src="https://cl.ly/0n2g1T1H3g3O/4.png" alt="pic4"><br>打开config文件，进行配置<br><img src="https://cl.ly/1m0Q3m3Y3U2G/5.png" alt="pic4"></p>
</li>
<li><h5 id="4-进入你部署博客根目录，打开-config-yml文件，修改Repository，变为"><a href="#4-进入你部署博客根目录，打开-config-yml文件，修改Repository，变为" class="headerlink" title="4 进入你部署博客根目录，打开_config.yml文件，修改Repository，变为"></a>4 进入你部署博客根目录，打开_config.yml文件，修改Repository，变为</h5><p><img src="https://cl.ly/2D1s1G3a1o2K/6.png" alt="pic4"></p>
</li>
<li><p>#####5 进入git bash按原流程重新提交部署，你会发现需要第二个秘钥”id_rsa_B”的密码<br><img src="https://cl.ly/382R3o3v0U3g/1.png" alt="hexod"></p>
</li>
</ul>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>我们可以发现 ssh 客户端是通过类似: git@github.com:A/A.github.com.git 这样的 git 地址中的 User 和 Host 来识别使用哪个本地私钥的。 很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。 所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;最近在使用Hexo搭建博客时碰到很多问题，其中之一便是如果之前PC终端已使用git搭建过博客，现在需要在同一台终端上使用不同的git账户再搭
    
    </summary>
    
    
  </entry>
  
</feed>
